{"ast":null,"code":"var _jsxFileName = \"/Users/christianmark/Desktop/Projects/HelmetDetectionAI/src/App.js\";\n// Import dependencies\nimport React, { useRef, useState, useEffect } from \"react\";\nimport * as tf from \"@tensorflow/tfjs\"; // 1. TODO - Import required model here\n// e.g. import * as tfmodel from \"@tensorflow-models/mmodel\";\n\nimport * as cocossd from \"@tensorflow-models/coco-ssd\";\nimport Webcam from \"react-webcam\";\nimport \"./App.css\"; // 2. TODO - Import drawing utility here\n// e.g. import { drawRect } from \"./utilities\";\n\nimport { drawRect } from \"./utilities\";\nimport './App.css';\nimport Timer from \"./components/timer.js\";\n\nfunction App() {\n  function move() {\n    var elem = document.getElementById(\"myBar\");\n    var width = 20;\n    var id = setInterval(frame, 10);\n\n    function frame() {\n      if (width >= 100) {\n        clearInterval(id);\n      } else {\n        width++;\n        elem.style.width = width + '%';\n        elem.innerHTML = width * 1 + '%';\n      }\n    }\n  }\n\n  const webcamRef = useRef(null);\n  const canvasRef = useRef(null); // Main function\n\n  const runCoco = async () => {\n    // 3. TODO - Load network \n    // e.g. const net = await cocossd.load();\n    const net = await cocossd.load(); //  Loop and detect hands\n\n    setInterval(() => {\n      detect(net);\n    }, 10);\n  };\n\n  const detect = async net => {\n    // Check data is available\n    if (typeof webcamRef.current !== \"undefined\" && webcamRef.current !== null && webcamRef.current.video.readyState === 4) {\n      // Get Video Properties\n      const video = webcamRef.current.video;\n      const videoWidth = webcamRef.current.video.videoWidth;\n      const videoHeight = webcamRef.current.video.videoHeight; // Set video width\n\n      webcamRef.current.video.width = videoWidth;\n      webcamRef.current.video.height = videoHeight; // Set canvas height and width\n\n      canvasRef.current.width = videoWidth;\n      canvasRef.current.height = videoHeight; // 4. TODO - Make Detections\n      // e.g. const obj = await net.detect(video);\n\n      const obj = await net.detect(video);\n      console.log(obj); // Draw mesh\n\n      const ctx = canvasRef.current.getContext(\"2d\"); // 5. TODO - Update drawing utility\n      // drawSomething(obj, ctx)  \n\n      drawRect(obj, ctx);\n    }\n  };\n\n  useEffect(() => {\n    runCoco();\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"header\", {\n    className: \"App-header\",\n    style: {\n      display: \"flex\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Timer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Webcam, {\n    ref: webcamRef,\n    muted: true,\n    style: {\n      position: \"absolute\",\n      // marginLeft: \"auto\",\n      // marginRight: \"auto\",\n      marginLeft: \"100px\",\n      marginRight: \"auto\",\n      left: 0,\n      right: 0,\n      textAlign: \"center\",\n      zindex: 9,\n      width: 640,\n      height: 480\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"canvas\", {\n    ref: canvasRef,\n    style: {\n      position: \"absolute\",\n      // marginLeft: \"auto\",\n      // marginRight: \"auto\",\n      flex: 1,\n      marginLeft: \"100px\",\n      marginRight: \"auto\",\n      left: 0,\n      right: 0,\n      textAlign: \"center\",\n      zindex: 8,\n      width: 640,\n      height: 480\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      flex: 1\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"w3-light-grey\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    id: \"myBar\",\n    className: \"w3-container w3-green\",\n    style: {\n      width: '20%'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 11\n    }\n  }, \"20%\")), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"w3-button w3-green\",\n    onclick: \"move()\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 9\n    }\n  }, \"Click Me\"))));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/christianmark/Desktop/Projects/HelmetDetectionAI/src/App.js"],"names":["React","useRef","useState","useEffect","tf","cocossd","Webcam","drawRect","Timer","App","move","elem","document","getElementById","width","id","setInterval","frame","clearInterval","style","innerHTML","webcamRef","canvasRef","runCoco","net","load","detect","current","video","readyState","videoWidth","videoHeight","height","obj","console","log","ctx","getContext","display","position","marginLeft","marginRight","left","right","textAlign","zindex","flex"],"mappings":"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","sourcesContent":["// Import dependencies\nimport React, { useRef, useState, useEffect } from \"react\";\nimport * as tf from \"@tensorflow/tfjs\";\n// 1. TODO - Import required model here\n// e.g. import * as tfmodel from \"@tensorflow-models/mmodel\";\nimport * as cocossd from \"@tensorflow-models/coco-ssd\";\nimport Webcam from \"react-webcam\";\nimport \"./App.css\";\n// 2. TODO - Import drawing utility here\n// e.g. import { drawRect } from \"./utilities\";\nimport { drawRect } from \"./utilities\";\nimport './App.css'\nimport Timer from \"./components/timer.js\";\n\n\nfunction App() {\n\nfunction move() {\n  var elem = document.getElementById(\"myBar\");   \n  var width = 20;\n  var id = setInterval(frame, 10);\n  function frame() {\n    if (width >= 100) {\n      clearInterval(id);\n    } else {\n      width++; \n      elem.style.width = width + '%'; \n      elem.innerHTML = width * 1  + '%';\n    }\n  }\n}\n\n\n  const webcamRef = useRef(null);\n  const canvasRef = useRef(null);\n\n  // Main function\n  const runCoco = async () => {\n    // 3. TODO - Load network \n    // e.g. const net = await cocossd.load();\n    const net = await cocossd.load();\n    \n    //  Loop and detect hands\n    setInterval(() => {\n      detect(net);\n    }, 10);\n  };\n\n  const detect = async (net) => {\n    // Check data is available\n    if (\n      typeof webcamRef.current !== \"undefined\" &&\n      webcamRef.current !== null &&\n      webcamRef.current.video.readyState === 4\n    ) {\n      // Get Video Properties\n      const video = webcamRef.current.video;\n      const videoWidth = webcamRef.current.video.videoWidth;\n      const videoHeight = webcamRef.current.video.videoHeight;\n\n      // Set video width\n      webcamRef.current.video.width = videoWidth;\n      webcamRef.current.video.height = videoHeight;\n\n      // Set canvas height and width\n      canvasRef.current.width = videoWidth;\n      canvasRef.current.height = videoHeight;\n\n      // 4. TODO - Make Detections\n      // e.g. const obj = await net.detect(video);\n      const obj = await net.detect(video);\n      console.log(obj);\n\n      // Draw mesh\n      const ctx = canvasRef.current.getContext(\"2d\");\n\n      // 5. TODO - Update drawing utility\n      // drawSomething(obj, ctx)  \n      drawRect(obj, ctx);\n    }\n  };\n\n  useEffect(()=>{runCoco()},[]);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\" style={{display: \"flex\"}}>\n        <Timer />\n        <Webcam\n          ref={webcamRef}\n          muted={true} \n          style={{\n            position: \"absolute\",\n            // marginLeft: \"auto\",\n            // marginRight: \"auto\",\n            marginLeft: \"100px\",\n            marginRight: \"auto\",\n            left: 0,\n            right: 0,\n            textAlign: \"center\",\n            zindex: 9,\n            width: 640,\n            height: 480,\n          }}\n        />\n\n        <canvas\n          ref={canvasRef}\n          style={{\n            position: \"absolute\",\n            // marginLeft: \"auto\",\n            // marginRight: \"auto\",\n            flex: 1,\n            marginLeft: \"100px\",\n            marginRight: \"auto\",\n            left: 0,\n            right: 0,\n            textAlign: \"center\",\n            zindex: 8,\n            width: 640,\n            height: 480,\n          }}\n        />\n        <div style={{flex: 1}}>\n        <div className=\"w3-light-grey\">\n          <div id=\"myBar\" className=\"w3-container w3-green\" style={{width: '20%'}}>20%</div>\n        </div>\n        <br />\n        <button className=\"w3-button w3-green\" onclick=\"move()\">Click Me</button>\n      </div>\n      </header>\n    </div>\n\n    \n  );\n\n  \n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}